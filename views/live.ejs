<html>
  <head>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-4bw+/aepP/YC94hEpVNVgiZdgIC5+VKNBQNGCHeKRQN+PtmoHDEXuppvnDJzQIu9"
      crossorigin="anonymous"
    />
    <link rel="stylesheet" href="/css/live.css" type="text/css" />
    <link rel="short icon" href="/img/logo.png" />
  </head>

  <body>
    <div data-admin="<%=isAdmin%>" id="admin">
      <h1 data-title="<%=title%>" id="title"><%=title%> 라이브중!</h1>
      <div class="videoBox">
        <video id="myFace" playsinline autoplay></video>
        <ul id="chatList"></ul>
      </div>
      <input
        type="text"
        class="form-control"
        placeholder="채팅을 시작해보세요"
        id="chatInput"
        aria-label="채팅을 시작해보세요"
        aria-describedby="button-addon2"
        maxlength="30"
      />
      <div id="peerStreams"></div>
      <%if(isAdmin){%>
      <div id="settingBox">
        <button type="button" class="btn btn-primary" id="mute">음소거</button>
        <button type="button" class="btn btn-primary" id="camera">
          카메라 끄기
        </button>
        <select
          id="cameras"
          class="form-select"
          aria-label="Default select example"
        >
          <option value="device" selected disabled hidden>카메라 옵션</option>
        </select>
      </div>
      <%}%>
    </div>

    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-HwwvtgBNo3bZJJLYd8oVXjrBZt8cqVSpeBNS5n7C8IVInixGAoxmnlMuBnhbgrkm"
      crossorigin="anonymous"
    ></script>
    <script
      src="https://cdn.socket.io/4.3.2/socket.io.min.js"
      integrity="sha384-KAZ4DtjNhLChOB/hxXuKqhMLYvx3b5MlT55xPEiNmREKRzeEm+RVPlTnAn0ajQNs"
      crossorigin="anonymous"
    ></script>
    <script>
      const socket = io();

      const myFaceVideo = document.getElementById('myFace');
      const muteButton = document.getElementById('mute');
      const cameraButton = document.getElementById('camera');
      const camerasSelect = document.getElementById('cameras');
      const chatList = document.getElementById('chatList');
      const roomName = document
        .querySelector('#title')
        .getAttribute('data-title');
      // const productId = document
      //   .querySelector('#title')
      //   .getAttribute('data-product');
      const admin = document.querySelector('#admin').getAttribute('data-admin');
      const peerStreams = document.getElementById('peerStreams');
      const chatInput = document.querySelector('#chatInput');
      const chatInputBtn = document.querySelector('.chatInputBtn');

      let myStream;
      let muted = false;
      let cameraOff = false;
      let peerConnections = new Map();
      const isAdmin = admin === 'true' ? true : false;

      muteButton?.addEventListener('click', handleMuteClick);
      cameraButton?.addEventListener('click', handleCameraClick);
      camerasSelect?.addEventListener('input', handleCameraChange);
      window.onload = () => {
        initCall();
      };

      async function initCall() {
        await getMedia();
        socket.emit('join_room', roomName);
      }

      //- 채팅 하기 -//
      chatInput.addEventListener('keyup', async () => {
        if (event.keyCode === 13) {
          event.preventDefault();
          if (chatInput.value.replace(/ /g, '').length === 0) return;
          await socket.emit('chatInput', {
            chat: chatInput.value,
            roomName,
          });
          chatInput.value = '';
        }
      });

      //- 채팅 내용 보여주기 -//
      socket.on('newMsg', (msg) => {
        const li = document.createElement('li');
        li.innerText = `${msg}`;
        chatList.append(li);
        chatList.scrollTop = chatList.scrollHeight;
      });

      //- 카메라 정보 가져오기 -//
      async function getCameras() {
        if (isAdmin) {
          try {
            const devices = await navigator.mediaDevices.enumerateDevices();
            const cameras = devices.filter(
              (device) => device.kind === 'videoinput',
            );
            const currentCamera = myStream.getVideoTracks()[0];
            cameras.forEach((camera) => {
              const option = document.createElement('option');
              option.value = camera.deviceId;
              option.innerText = camera.label;
              if (currentCamera.label === camera.label) {
                option.selected = true;
              }
              camerasSelect.appendChild(option);
            });
          } catch (e) {
            console.log(e);
          }
        }
      }

      //- 미디어 가져오기 -//
      async function getMedia(deviceId) {
        if (isAdmin) {
          const initialConstrains = {
            audio: true,
            video: { facingMode: 'user' },
          };
          const cameraConstrains = {
            audio: true,
            video: { deviceId: { exact: deviceId } },
          };

          try {
            myStream = await navigator.mediaDevices.getUserMedia(
              deviceId ? cameraConstrains : initialConstrains,
            );
            myFaceVideo.srcObject = myStream;
            if (!deviceId) {
              await getCameras();
            }
          } catch (e) {
            console.log(e);
          }
        }
      }

      //- 마이크 켜기/끄기 -//
      function handleMuteClick() {
        if (isAdmin) {
          myStream
            .getAudioTracks()
            .forEach((track) => (track.enabled = !track.enabled));
          if (!muted) {
            muteButton.innerText = '음소거 해제';
            muted = true;
          } else {
            muteButton.innerText = '음소거';
            muted = false;
          }
        }
      }

      //- 카메라 옵션 -//
      function handleCameraClick() {
        if (isAdmin) {
          myStream
            .getVideoTracks()
            .forEach((track) => (track.enabled = !track.enabled));
          if (cameraOff) {
            cameraButton.innerText = '카메라 끄기';
            cameraOff = false;
          } else {
            cameraButton.innerText = '카메라 켜기';
            cameraOff = true;
          }
        }
      }

      //- 카메라 변경 -//
      async function handleCameraChange() {
        if (isAdmin) {
          await getMedia(camerasSelect.value);
          for (var [key, value] of peerConnections) {
            const videoTrack = myStream.getVideoTracks()[0];
            const videoSender = value
              .getSenders()
              .find((sender) => sender.track.kind === 'video');
            videoSender.replaceTrack(videoTrack);
          }

          muteButton.innerText = '음소거';
          muted = false;
        }
      }

      //- 비디오 스트림 -//
      function getRemoteStreamVideo(stream) {
        const videos = peerStreams.querySelectorAll('video');
        for (let i = 0; i < videos.length; i++) {
          if (stream instanceof MediaStream) {
            if (videos[i].srcObject.id === stream.id) {
              return videos[i];
            }
          } else if (stream instanceof MediaStreamTrack) {
            if (videos[i].srcObject.getVideoTracks()[0].id === stream.id) {
              return videos[i];
            }
          }
        }
      }

      //- offer 보내기 -//
      socket.on('welcome', async (socketId) => {
        makeConnection(socketId);
        const peerConnection = peerConnections.get(socketId);
        const offer = await peerConnection.createOffer();
        peerConnection.setLocalDescription(offer);
        socket.emit('offer', { offer, socketId });
      });

      //- offer -> answer -//
      socket.on('offer', async (offer, socketId) => {
        makeConnection(socketId);
        const peerConnection = peerConnections.get(socketId);
        peerConnection.setRemoteDescription(offer);
        const answer = await peerConnection.createAnswer();
        peerConnection.setLocalDescription(answer);
        socket.emit('answer', { answer, socketId });
      });

      //- answer 보내기 -//
      socket.on('answer', (answer, socketId) => {
        const peerConnection = peerConnections.get(socketId);
        if (
          !peerConnection.remoteDescription &&
          (peerConnection.signalingState === 'have-local-offer' ||
            peerConnection.signalingState === 'have-remote-offer')
        ) {
          peerConnection.setRemoteDescription(answer);
        }
      });

      //- ice 보내기 -//
      socket.on('ice', (ice, socketId) => {
        if (ice) {
          const peerConnection = peerConnections.get(socketId);
          if (peerConnection) {
            peerConnection.addIceCandidate(ice);
          }
        }
      });

      //- peer 연결 -//
      function makeConnection(socketId) {
        let peerConnection = new RTCPeerConnection({
          iceServers: [
            {
              urls: [
                'stun:stun.l.google.com:19302',
                'stun:stun1.l.google.com:19302',
                'stun:stun2.l.google.com:19302',
                'stun:stun3.l.google.com:19302',
                'stun:stun4.l.google.com:19302',
              ],
            },
          ],
        });

        peerConnection.addEventListener('icecandidate', handleIce);
        if (peerConnection.addTrack !== undefined) {
          peerConnection.ontrack = (event) => {
            event.streams.forEach((stream) => handleAddStream(stream));
          };
        } else {
          peerConnection.onaddstream = (event) => {
            handleAddStream(event.stream);
          };
        }
        if (isAdmin) {
          myStream
            .getTracks()
            .forEach((track) => peerConnection.addTrack(track, myStream));
        }

        peerConnections.set(socketId, peerConnection);
      }

      //- ice 이벤트 -//
      function handleIce(data) {
        for (let [key, value] of peerConnections) {
          if (value === data.target) {
            socket.emit('ice', { ice: data.candidate, id: key });
            break;
          }
        }
      }

      //- stream 불러오기 -//
      function handleAddStream(stream) {
        const addedVideo = getRemoteStreamVideo(stream);
        if (!addedVideo) {
          if (!isAdmin) {
            myFaceVideo.srcObject = stream;
          }
        }
      }
    </script>
  </body>
</html>
